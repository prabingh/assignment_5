)
# Forecast using the ARIMA model
forecast_values <- arima_model %>%
forecast(h = nrow(test))
# Plot actual vs. forecasted values with manual annotations
autoplot(forecast_values) +
labs(title = "ARIMA Forecast",
x = "Date",
y = "CO2 Concentration")
# Calculate residuals
residuals <- test$value - forecast_values$.mean
library(ggplot2)
# Assuming residuals is a numeric vector or time series
# Create a data frame with time and residuals
residual_df <- data.frame(Time = time(residuals), Residuals = residuals)
# Plot residuals
ggplot(residual_df, aes(x = Time, y = Residuals)) +
geom_line() +
labs(title = "Residuals Plot",
x = "Time",
y = "Residuals")
# Autocorrelation Function (ACF) Plot of residuals
Acf(residuals, main = "ACF Plot of Residuals")
# Ljung-Box Test for residuals
Box.test(residuals, lag = 20, type = "Ljung-Box")
# Histogram of residuals
histogram_plot <- ggplot(data.frame(Residuals = residuals), aes(x = Residuals)) +
geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
labs(title = "Histogram of Residuals", x = "Residuals", y = "Frequency") +
theme_minimal()
# Q-Q plot of residuals
qq_plot <- ggplot(data.frame(Residuals = residuals), aes(sample = Residuals)) +
stat_qq() +
stat_qq_line(color = "red", linetype = "dashed") +
labs(title = "Q-Q Plot of Residuals") +
theme_minimal()
# Display plots
histogram_plot
qq_plot
shapiro_test <- residuals %>%
stats::shapiro.test()
shapiro_test
# Loading libraries and data.
library(tidyverse)
time_series_CO2 <- read_csv("hawai.csv")
str(time_series_CO2)
# Convert the "time" column to a Date format ( in YYYY.MM format)
time_series_CO2$time <- as.Date(paste0(time_series_CO2$time, "-01"), format = "%Y.%m-%d")
# Create a time series
my_time_series <- ts(time_series_CO2$CO2, start = c(1958, 1), frequency = 12)
# Determine the split point
split_point <- round(0.7 * length(my_time_series))
# Splitting into training and testing sets
train <- head(my_time_series, split_point)
test <- tail(my_time_series, length(my_time_series) - split_point)
# Test that they are identical.# Should be TRUE
identical(train, head(my_time_series, split_point))
identical(test, tail(my_time_series, length(my_time_series) - split_point))
#####
library(fpp3)
library(forecast)
# Convert data to tsibble format
train <- as_tsibble(train)
test <- as_tsibble(test)
# Fit an ARIMA model to the training data
arima_model <- train %>%
model(
ARIMA = ARIMA(value)
)
# Forecast using the ARIMA model
forecast_values <- arima_model %>%
forecast(h = nrow(test))
# Plot actual vs. forecasted values with manual annotations
autoplot(forecast_values) +
labs(title = "ARIMA Forecast",
x = "Date",
y = "CO2 Concentration")
# Calculate residuals
residuals <- test$value - forecast_values$.mean
library(ggplot2)
# Assuming residuals is a numeric vector or time series
# Create a data frame with time and residuals
residual_df <- data.frame(Time = time(residuals), Residuals = residuals)
# Plot residuals
ggplot(residual_df, aes(x = Time, y = Residuals)) +
geom_line() +
labs(title = "Residuals Plot",
x = "Time",
y = "Residuals")
# Autocorrelation Function (ACF) Plot of residuals
Acf(residuals, main = "ACF Plot of Residuals")
# Ljung-Box Test for residuals
Box.test(residuals, lag = 20, type = "Ljung-Box")
# Histogram of residuals
histogram_plot <- ggplot(data.frame(Residuals = residuals), aes(x = Residuals)) +
geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
labs(title = "Histogram of Residuals", x = "Residuals", y = "Frequency") +
theme_minimal()
# Q-Q plot of residuals
qq_plot <- ggplot(data.frame(Residuals = residuals), aes(sample = Residuals)) +
stat_qq() +
stat_qq_line(color = "red", linetype = "dashed") +
labs(title = "Q-Q Plot of Residuals") +
theme_minimal()
# Display plots
histogram_plot
qq_plot
shapiro_test <- residuals %>%
stats::shapiro.test()
shapiro_test
# Plot residuals
ggplot(residual_df, aes(x = Time, y = Residuals)) +
geom_line() +
labs(title = "Residuals Plot",
x = "Time",
y = "Residuals")
**# Loading Libraries and Data**
library(tidyverse)
library(fpp3)
library(forecast)
library(ggplot2)
# Load the time series data from a CSV file
time_series_CO2 <- read_csv("hawai.csv")
# Check the structure of the data
str(time_series_CO2)
# Convert the "time" column to a Date format (YYYY.MM)
time_series_CO2$time <- as.Date(paste0(time_series_CO2$time, "-01"), format = "%Y.%m-%d")
# Create a time series object
my_time_series <- ts(time_series_CO2$CO2, start = c(1958, 1), frequency = 12)
# Convert the "time" column to a Date format (YYYY.MM)
time_series_CO2$time <- as.Date(paste0(time_series_CO2$time, "-01"), format = "%Y.%m-%d")
# Create a time series object
my_time_series <- ts(time_series_CO2$CO2, start = c(1958, 1), frequency = 12)
# Convert data to tsibble format
train <- as_tsibble(train)
# Determine the split point for dividing data into training and testing sets
split_point <- round(0.7 * length(my_time_series))
# Split the time series into training and testing sets
train <- head(my_time_series, split_point)
test <- tail(my_time_series, length(my_time_series) - split_point)
# Test that the splits are correct
identical(train, head(my_time_series, split_point))
identical(test, tail(my_time_series, length(my_time_series) - split_point))
# Convert data to tsibble format
train <- as_tsibble(train)
test <- as_tsibble(test)
# Fit an ARIMA model to the training data
arima_model <- train %>%
model(ARIMA = ARIMA(value))
# Forecast using the ARIMA model
forecast_values <- arima_model %>%
forecast(h = nrow(test))
# Plot actual vs. forecasted values
autoplot(forecast_values) +
labs(title = "ARIMA Forecast", x = "Date", y = "CO2 Concentration")
# Calculate residuals
residuals <- test$value - forecast_values$.mean
# Create a data frame to visualize residuals
residual_df <- data.frame(Time = time(residuals), Residuals = residuals)
# Plot residuals over time
ggplot(residual_df, aes(x = Time, y = Residuals)) +
geom_line() +
labs(title = "Residuals Plot", x = "Time", y = "Residuals")
# Plot autocorrelation function (ACF) of residuals
Acf(residuals, main = "ACF Plot of Residuals")
# Perform Ljung-Box test for residuals
Box.test(residuals, lag = 20, type = "Ljung-Box")
# Histogram of residuals
histogram_plot <- ggplot(data.frame(Residuals = residuals), aes(x = Residuals)) +
geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
labs(title = "Histogram of Residuals", x = "Residuals", y = "Frequency") +
theme_minimal()
# Q-Q plot of residuals
qq_plot <- ggplot(data.frame(Residuals = residuals), aes(sample = Residuals)) +
stat_qq() +
stat_qq_line(color = "red", linetype = "dashed") +
labs(title = "Q-Q Plot of Residuals") +
theme_minimal()
# Display plots
histogram_plot
qq_plot
# Perform Shapiro-Wilk test for normality
shapiro_test <- residuals %>%
stats::shapiro.test()
shapiro_test
# Convert the "time" column to a Date format (YYYY.MM)
time_series_CO2$time <- as.Date(paste0(time_series_CO2$time, "-01"), format = "%Y.%m-%d")
# Create a time series object
my_time_series <- ts(time_series_CO2$CO2, start = c(1958, 1), frequency = 12)
#Loading Libraries and data
library(tidyverse)
library(fpp3)
library(forecast)
library(ggplot2)
# Load the time series data from a CSV file
time_series_CO2 <- read_csv("hawai.csv")
# Check the structure of the data
str(time_series_CO2)
# Calculate residuals
residuals <- test$value - forecast_values$.mean
# Create a data frame to visualize residuals
residual_df <- data.frame(Time = time(residuals), Residuals = residuals)
# Plot residuals over time
ggplot(residual_df, aes(x = Time, y = Residuals)) +
geom_line() +
labs(title = "Residuals Plot", x = "Time", y = "Residuals")
# Plot autocorrelation function (ACF) of residuals
Acf(residuals, main = "ACF Plot of Residuals")
# Perform Ljung-Box test for residuals
Box.test(residuals, lag = 20, type = "Ljung-Box")
# Calculate residuals
residuals <- test$value - forecast_values$.mean
# Create a data frame to visualize residuals
residual_df <- data.frame(Time = time(residuals), Residuals = residuals)
# Plot residuals over time
ggplot(residual_df, aes(x = Time, y = Residuals)) +
geom_line() +
labs(title = "Residuals Plot", x = "Time", y = "Residuals")
# Plot autocorrelation function (ACF) of residuals
Acf(residuals, main = "ACF Plot of Residuals")
# Perform Ljung-Box test for residuals
Box.test(residuals, lag = 20, type = "Ljung-Box")
# Calculate residuals
residuals <- test$value - forecast_values$.mean
# Create a data frame to visualize residuals
residual_df <- data.frame(Time = time(residuals), Residuals = residuals)
# Plot residuals over time
ggplot(residual_df, aes(x = Time, y = Residuals)) +
geom_line() +
labs(title = "Residuals Plot", x = "Time", y = "Residuals")
# Plot autocorrelation function (ACF) of residuals
Acf(residuals, main = "ACF Plot of Residuals")
# Perform Ljung-Box test for residuals
Box.test(residuals, lag = 20, type = "Ljung-Box")
# Histogram of residuals
histogram_plot <- ggplot(data.frame(Residuals = residuals), aes(x = Residuals)) +
geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
labs(title = "Histogram of Residuals", x = "Residuals", y = "Frequency") +
theme_minimal()
# Q-Q plot of residuals
qq_plot <- ggplot(data.frame(Residuals = residuals), aes(sample = Residuals)) +
stat_qq() +
stat_qq_line(color = "red", linetype = "dashed") +
labs(title = "Q-Q Plot of Residuals") +
theme_minimal()
# Display plots
histogram_plot
qq_plot
# Perform Shapiro-Wilk test for normality
shapiro_test <- residuals %>%
stats::shapiro.test()
shapiro_test
# Histogram of residuals
histogram_plot <- ggplot(data.frame(Residuals = residuals), aes(x = Residuals)) +
geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
labs(title = "Histogram of Residuals", x = "Residuals", y = "Frequency") +
theme_minimal()
#Loading Libraries and data
library(tidyverse)
library(fpp3)
library(forecast)
library(ggplot2)
# Load the time series data from a CSV file
time_series_CO2 <- read_csv("hawai.csv")
# Check the structure of the data
str(time_series_CO2)
# Convert the "time" column to a Date format (YYYY.MM)
time_series_CO2$time <- as.Date(paste0(time_series_CO2$time, "-01"), format = "%Y.%m-%d")
# Create a time series object
my_time_series <- ts(time_series_CO2$CO2, start = c(1958, 1), frequency = 12)
# Determine the split point for dividing data into training and testing sets
split_point <- round(0.7 * length(my_time_series))
# Split the time series into training and testing sets
train <- head(my_time_series, split_point)
test <- tail(my_time_series, length(my_time_series) - split_point)
# Test that the splits are correct
identical(train, head(my_time_series, split_point))
identical(test, tail(my_time_series, length(my_time_series) - split_point))
# Convert data to tsibble format
train <- as_tsibble(train)
test <- as_tsibble(test)
# Fit an ARIMA model to the training data
arima_model <- train %>%
model(ARIMA = ARIMA(value))
# Forecast using the ARIMA model
forecast_values <- arima_model %>%
forecast(h = nrow(test))
# Plot actual vs. forecasted values
autoplot(forecast_values) +
labs(title = "ARIMA Forecast", x = "Date", y = "CO2 Concentration")
# Calculate residuals
residuals <- test$value - forecast_values$.mean
# Create a data frame to visualize residuals
residual_df <- data.frame(Time = time(residuals), Residuals = residuals)
# Plot residuals over time
ggplot(residual_df, aes(x = Time, y = Residuals)) +
geom_line() +
labs(title = "Residuals Plot", x = "Time", y = "Residuals")
# Plot autocorrelation function (ACF) of residuals
Acf(residuals, main = "ACF Plot of Residuals")
# Perform Ljung-Box test for residuals
Box.test(residuals, lag = 20, type = "Ljung-Box")
# Calculate residuals
residuals <- test$value - forecast_values$.mean
# Create a data frame to visualize residuals
residual_df <- data.frame(Time = time(residuals), Residuals = residuals)
# Plot residuals over time
ggplot(residual_df, aes(x = Time, y = Residuals)) +
geom_line() +
labs(title = "Residuals Plot", x = "Time", y = "Residuals")
# Plot autocorrelation function (ACF) of residuals
Acf(residuals, main = "ACF Plot of Residuals")
# Perform Ljung-Box test for residuals
Box.test(residuals, lag = 20, type = "Ljung-Box")
# Histogram of residuals
histogram_plot <- ggplot(data.frame(Residuals = residuals), aes(x = Residuals)) +
geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
labs(title = "Histogram of Residuals", x = "Residuals", y = "Frequency") +
theme_minimal()
# Q-Q plot of residuals
qq_plot <- ggplot(data.frame(Residuals = residuals), aes(sample = Residuals)) +
stat_qq() +
stat_qq_line(color = "red", linetype = "dashed") +
labs(title = "Q-Q Plot of Residuals") +
theme_minimal()
# Display plots
histogram_plot
qq_plot
# Perform Shapiro-Wilk test for normality
shapiro_test <- residuals %>%
stats::shapiro.test()
shapiro_test
# Calculate residuals
residuals <- test$value - forecast_values$.mean
# Create a data frame to visualize residuals
residual_df <- data.frame(Time = time(residuals), Residuals = residuals)
# Plot residuals over time
ggplot(residual_df, aes(x = Time, y = Residuals)) +
geom_line() +
labs(title = "Residuals Plot", x = "Time", y = "Residuals")
# Plot autocorrelation function (ACF) of residuals
Acf(residuals, main = "ACF Plot of Residuals")
# Perform Ljung-Box test for residuals
Box.test(residuals, lag = 20, type = "Ljung-Box")
# Calculate residuals
residuals <- test$value - forecast_values$.mean
# Create a data frame to visualize residuals
residual_df <- data.frame(Time = time(residuals), Residuals = residuals)
# Plot residuals over time
ggplot(residual_df, aes(x = Time, y = Residuals)) +
geom_line() +
labs(title = "Residuals Plot", x = "Time", y = "Residuals")
# Plot autocorrelation function (ACF) of residuals
Acf(residuals, main = "ACF Plot of Residuals")
# Perform Ljung-Box test for residuals
Box.test(residuals, lag = 20, type = "Ljung-Box")
# Calculate residuals
residuals <- test$value - forecast_values$.mean
# Create a data frame to visualize residuals
residual_df <- data.frame(Time = time(residuals), Residuals = residuals)
# Plot residuals over time
ggplot(residual_df, aes(x = Time, y = Residuals)) +
geom_line() +
labs(title = "Residuals Plot", x = "Time", y = "Residuals")
# Plot autocorrelation function (ACF) of residuals
Acf(residuals, main = "ACF Plot of Residuals")
# Perform Ljung-Box test for residuals
Box.test(residuals, lag = 20, type = "Ljung-Box")
#Loading Libraries and data
library(tidyverse)
library(fpp3)
library(forecast)
library(ggplot2)
# Load the time series data from a CSV file
time_series_CO2 <- read_csv("hawai.csv")
# Check the structure of the data
str(time_series_CO2)
# Convert the "time" column to a Date format (YYYY.MM)
time_series_CO2$time <- as.Date(paste0(time_series_CO2$time, "-01"), format = "%Y.%m-%d")
# Create a time series object
my_time_series <- ts(time_series_CO2$CO2, start = c(1958, 1), frequency = 12)
# Determine the split point for dividing data into training and testing sets
split_point <- round(0.7 * length(my_time_series))
# Split the time series into training and testing sets
train <- head(my_time_series, split_point)
test <- tail(my_time_series, length(my_time_series) - split_point)
# Test that the splits are correct
identical(train, head(my_time_series, split_point))
identical(test, tail(my_time_series, length(my_time_series) - split_point))
# Convert data to tsibble format
train <- as_tsibble(train)
test <- as_tsibble(test)
# Fit an ARIMA model to the training data
arima_model <- train %>%
model(ARIMA = ARIMA(value))
# Forecast using the ARIMA model
forecast_values <- arima_model %>%
forecast(h = nrow(test))
# Plot actual vs. forecasted values
autoplot(forecast_values) +
labs(title = "ARIMA Forecast", x = "Date", y = "CO2 Concentration")
# Calculate residuals
residuals <- test$value - forecast_values$.mean
# Create a data frame to visualize residuals
residual_df <- data.frame(Time = time(residuals), Residuals = residuals)
# Plot residuals over time
ggplot(residual_df, aes(x = Time, y = Residuals)) +
geom_line() +
labs(title = "Residuals Plot", x = "Time", y = "Residuals")
# Plot autocorrelation function (ACF) of residuals
Acf(residuals, main = "ACF Plot of Residuals")
# Perform Ljung-Box test for residuals
Box.test(residuals, lag = 20, type = "Ljung-Box")
# Calculate residuals
residuals <- test$value - forecast_values$.mean
# Create a data frame to visualize residuals
residual_df <- data.frame(Time = time(residuals), Residuals = residuals)
# Plot residuals over time
ggplot(residual_df, aes(x = Time, y = Residuals)) +
geom_line() +
labs(title = "Residuals Plot", x = "Time", y = "Residuals")
# Plot autocorrelation function (ACF) of residuals
Acf(residuals, main = "ACF Plot of Residuals")
# Perform Ljung-Box test for residuals
Box.test(residuals, lag = 20, type = "Ljung-Box")
# Load the time series data from a CSV file
time_series_CO2 <- read_csv("hawai.csv")
#Loading Libraries and data
library(tidyverse)
library(fpp3)
library(forecast)
library(ggplot2)
# Load the time series data from a CSV file
time_series_CO2 <- read_csv("hawai.csv")
# Check the structure of the data
str(time_series_CO2)
# Convert the "time" column to a Date format (YYYY.MM)
time_series_CO2$time <- as.Date(paste0(time_series_CO2$time, "-01"), format = "%Y.%m-%d")
# Create a time series object
my_time_series <- ts(time_series_CO2$CO2, start = c(1958, 1), frequency = 12)
# Convert data to tsibble format
train <- as_tsibble(train)
test <- as_tsibble(test)
# Fit an ARIMA model to the training data
arima_model <- train %>%
model(ARIMA = ARIMA(value))
# Forecast using the ARIMA model
forecast_values <- arima_model %>%
forecast(h = nrow(test))
# Plot actual vs. forecasted values
autoplot(forecast_values) +
labs(title = "ARIMA Forecast", x = "Date", y = "CO2 Concentration")
# Calculate residuals
residuals <- test$value - forecast_values$.mean
# Create a data frame to visualize residuals
residual_df <- data.frame(Time = time(residuals), Residuals = residuals)
# Plot residuals over time
ggplot(residual_df, aes(x = Time, y = Residuals)) +
geom_line() +
labs(title = "Residuals Plot", x = "Time", y = "Residuals")
# Plot autocorrelation function (ACF) of residuals
Acf(residuals, main = "ACF Plot of Residuals")
# Perform Ljung-Box test for residuals
Box.test(residuals, lag = 20, type = "Ljung-Box")
# Loading libraries and data.
library(tidyverse)
time_series_CO2 <- read_csv("hawai.csv")
str(time_series_CO2)
# Convert the "time" column to a Date format ( in YYYY.MM format)
time_series_CO2$time <- as.Date(paste0(time_series_CO2$time, "-01"), format = "%Y.%m-%d")
# Create a time series
my_time_series <- ts(time_series_CO2$CO2, start = c(1958, 1), frequency = 12)
# Determine the split point
split_point <- round(0.7 * length(my_time_series))
# Splitting into training and testing sets
train <- head(my_time_series, split_point)
test <- tail(my_time_series, length(my_time_series) - split_point)
# Convert data to tsibble format
train <- as_tsibble(train)
test <- as_tsibble(test)
# Fit a SARIMA model to the training data
sarima_model <- train %>%
SARIMA = ARIMA(value ~ pdq(seasonal = TRUE))
# Fit a SARIMA model to the training data
sarima_model <- train %>%
SARIMA = ARIMA(value ~ pdq(seasonal = TRUE))
#####
library(fpp3)
# Fit a SARIMA model to the training data
sarima_model <- train %>%
model(
SARIMA = ARIMA(value ~ pdq(seasonal = TRUE))
)
# Forecast using the SARIMA model
forecast_values <- sarima_model %>%
forecast(h = length(test))
# Plot actual vs. forecasted values
autoplot(forecast_values) +
labs(title = "SARIMA Forecast",
x = "Date",
y = "CO2 Concentration")
# Fit a SARIMA model to the training data
sarima_model <- train %>%
model(
SARIMA = ARIMA(value, order = pdq, seasonal = list(order = seasonal_pdq))
)
# Fit a SARIMA model to the training data
# Fit a SARIMA model to the training data
sarima_model <- train %>%
model(
SARIMA = ARIMA(value, order = pdq, seasonal = list(order = seasonal_pdq))
)
